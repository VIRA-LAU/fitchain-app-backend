// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  phoneNumber String? @unique
  hash String @unique

  firstName String?
  lastName String?

  gender String?
  height Int?
  weight Int?
  age Int?
  nationality String?
  position String?
  rating Int?

  invitationsSent           InviteToGame[]  @relation("sender")
  invitationsReceived       InviteToGame[]  @relation("receiver")

  friendRequestsSent        AddFriend[]  @relation("sender")
  friendRequestsReceived    AddFriend[]  @relation("receiver")

  joinRequestsSent          RequestToJoin[]

  userStatistics         HasStatistics[]

  games Game[]

}

model Venue {

  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  managerEmail String @unique
  managerPhoneNumber String @unique
  hash  String @unique
  

  managerFirstName String?
  managerLastName String?
  branches Branch[]


}

model Branch {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  location String
  venueId Int
  photoDirectoryURL String?
  rating Int @default(0)
  courts Court[]
  venue  Venue    @relation(fields: [venueId],references: [id],onDelete: Cascade,onUpdate: Cascade)


}

model Game {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courtId Int
  adminId Int
  date DateTime
  duration Int
  type gameType @default(Basketball)
  adminTeam teamType @default(HOME)
  winnerTeam teamType @default(HOME)
  highlights String[]
  status gameStatus @default(PENDING)

  gamestatistics HasStatistics[]
  gameRequests  RequestToJoin[]
  gameInvitation InviteToGame[]

  court  Court    @relation(fields: [courtId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  admin  User    @relation(fields: [adminId],references: [id],onDelete: Cascade,onUpdate: Cascade)
}

model InviteToGame {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  userId Int
  friendId Int
  gameId Int
  team teamType @default(HOME)
  status invitationApproval @default(PENDING)

  user User @relation(name:"sender",fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation(name:"receiver", fields: [friendId], references: [id], onDelete: Cascade)
  game  Game    @relation(fields: [gameId],references: [id],onDelete: Cascade,onUpdate: Cascade)

  @@unique([userId, friendId, gameId])

}

model AddFriend {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  friendId Int
  status invitationApproval @default(PENDING)

  user User @relation(name:"sender",fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation(name:"receiver", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])

}

model RequestToJoin {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  gameId Int
  team teamType @default(HOME)
  status invitationApproval @default(PENDING)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  game  Game    @relation(fields: [gameId],references: [id],onDelete: Cascade,onUpdate: Cascade)

  @@unique([userId, gameId])

}


model HasStatistics {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  gameId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  game  Game    @relation(fields: [gameId],references: [id],onDelete: Cascade,onUpdate: Cascade)

  @@unique([userId, gameId])

}



model Court {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  courtType String
  nbOfPlayers Int
  branchId Int

  games   Game[]
  branch  Branch  @relation(fields: [branchId],references: [id],onDelete: Cascade,onUpdate: Cascade)




}


enum invitationApproval {
  PENDING
  APPROVED
  REJECTED
}

enum gameStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  CANCELLED
  FINISHED
}

enum gameType {
  Basketball
  Football
  Tennis
}

enum teamType {
  HOME
  AWAY
}