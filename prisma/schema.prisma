// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                 @id @default(autoincrement())
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  email                  String              @unique
  emailVerified          Boolean             @default(false)
  phoneNumber            String?             @unique
  hash                   String              @unique
  firstName              String?
  lastName               String?
  description            String?
  profilePhotoUrl        String?
  coverPhotoUrl          String?
  gender                 String?
  height                 Int?
  weight                 Int?
  age                    Int?
  nationality            String?
  position               String?
  rating                 Int?
  notificationsToken     String?
  invitationsSent        InviteToGame[]      @relation("sender")
  invitationsReceived    InviteToGame[]      @relation("receiver")
  friendRequestsSent     AddFriend[]         @relation("sender")
  friendRequestsReceived AddFriend[]         @relation("receiver")
  joinRequestsSent       RequestToJoinGame[]
  playerStatistics       PlayerStatistics[]
  playerRatings          PlayerRating[]      @relation("rater")
  receivedPlayerRatings  PlayerRating[]      @relation("player")
  gamesFollowed          FollowsGame[]
  games                  Game[]
}

model Venue {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  branches    Branch[]
}

model Branch {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  location           String?
  latitude           Float
  longitude          Float
  venueId            Int
  branchPhotoUrl     String?
  profilePhotoUrl    String?
  coverPhotoUrl      String?
  email              String   @unique
  emailVerified      Boolean  @default(false)
  phoneNumber        String?  @unique
  managerFirstName   String
  managerLastName    String
  hash               String   @unique
  notificationsToken String?
  courts             Court[]
  venue              Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Game {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  courtId           Int
  adminId           Int
  startTime         DateTime
  endTime           DateTime
  type              GameType            @default(Basketball)
  adminTeam         TeamType            @default(HOME)
  status            GameStatus          @default(PENDING)
  isRecording       Boolean             @default(false)
  videoPath         String?
  highlights        String[]
  homePoints        Int                 @default(0)
  updatedHomePoints Int                 @default(0)
  homePossession    String              @default("0%")
  awayPoints        Int                 @default(0)
  updatedAwayPoints Int                 @default(0)
  awayPossession    String              @default("0%")
  gameRequests      RequestToJoinGame[]
  gameInvitation    InviteToGame[]
  followers         FollowsGame[]
  playerRating      PlayerRating[]
  playerStatistics  PlayerStatistics[]
  court             Court               @relation(fields: [courtId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  admin             User                @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model FollowsGame {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  gameId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, gameId])
}

model InviteToGame {
  id        Int                @id @default(autoincrement())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  userId    Int
  friendId  Int
  gameId    Int
  team      TeamType           @default(HOME)
  status    InvitationApproval @default(PENDING)
  user      User               @relation(name: "sender", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  friend    User               @relation(name: "receiver", fields: [friendId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  game      Game               @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model AddFriend {
  id        Int                @id @default(autoincrement())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  userId    Int
  friendId  Int
  status    InvitationApproval @default(PENDING)
  user      User               @relation(name: "sender", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  friend    User               @relation(name: "receiver", fields: [friendId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, friendId])
}

model RequestToJoinGame {
  id        Int                @id @default(autoincrement())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  userId    Int
  gameId    Int
  team      TeamType           @default(HOME)
  status    InvitationApproval @default(PENDING)
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  game      Game               @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model PlayerStatistics {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int?
  processedId Int      @default(0)
  gameId      Int
  team        TeamType @default(HOME)
  scored      Int      @default(0)
  missed      Int      @default(0)
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([processedId, gameId])
}

model TimeSlot {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  startTime DateTime
  endTime   DateTime
  courtId   Int
  court     Court    @relation(fields: [courtId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Court {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  name        String
  courtType   String
  nbOfPlayers Int
  branchId    Int
  price       Int
  rating      Float?     @default(0.0)
  games       Game[]
  branch      Branch     @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  timeSlots   TimeSlot[]
}

model PlayerRating {
  id          Int    @id @default(autoincrement())
  gameId      Int
  raterId     Int
  playerId    Int
  performance Float? // remove
  teamPlayer  Float? // remove
  fairplay    Float? // remove
  defense     Float
  offense     Float
  general     Float
  skill       Float
  teamplay    Float
  punctuality Float
  game        Game   @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  player      User   @relation(name: "player", fields: [playerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rater       User   @relation(name: "rater", fields: [raterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum InvitationApproval {
  PENDING
  APPROVED
  REJECTED
}

enum GameStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  CANCELLED
  FINISHED
}

enum GameType {
  Basketball
  Football
  Tennis
}

enum TeamType {
  HOME
  AWAY
}
