// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                 @id @default(autoincrement())
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  email                  String              @unique
  emailCode              String?
  emailVerified          Boolean             @default(false)
  phoneNumber            String?             @unique
  hash                   String              @unique
  firstName              String?
  lastName               String?
  description            String?
  profilePhotoUrl        String?
  coverPhotoUrl          String?
  gender                 String?
  height                 Int?
  weight                 Int?
  age                    Int?
  nationality            String?
  position               String?
  rating                 Int?
  notificationsToken     String?
  invitationsSent        InviteToGame[]      @relation("sender")
  invitationsReceived    InviteToGame[]      @relation("receiver")
  friendRequestsSent     AddFriend[]         @relation("sender")
  friendRequestsReceived AddFriend[]         @relation("receiver")
  joinRequestsSent       RequestToJoinGame[]
  userStatistics         HasStatistics[]
  playerRated            PlayerRating[]      @relation("player")
  playerRater            PlayerRating[]      @relation("rater")
  gamesFollowed          FollowsGame[]
  games                  Game[]              @relation("createdGames")
}

model Venue {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  branches    Branch[]
}

model Branch {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  location           String?
  latitude           Float
  longitude          Float
  venueId            Int
  branchPhotoUrl     String?
  profilePhotoUrl    String?
  coverPhotoUrl      String?
  email              String   @unique
  emailCode          String?
  emailVerified      Boolean  @default(false)
  phoneNumber        String?  @unique
  managerFirstName   String
  managerLastName    String
  hash               String   @unique
  notificationsToken String?
  courts             Court[]
  venue              Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Game {
  id             Int                 @id @default(autoincrement())
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  courtId        Int
  adminId        Int
  startTime      DateTime
  endTime        DateTime
  type           gameType            @default(Basketball)
  adminTeam      teamType            @default(HOME)
  winnerTeam     winnerTeamType      @default(DRAW)
  highlights     String[]
  status         gameStatus          @default(PENDING)
  isRecording    Boolean             @default(false)
  gamestatistics HasStatistics[]
  gameRequests   RequestToJoinGame[]
  gameInvitation InviteToGame[]
  followers      FollowsGame[]
  playerRating   PlayerRating[]
  homeScore      Int?                @default(0)
  awayScore      Int?                @default(0)
  court          Court               @relation(fields: [courtId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  admin          User                @relation(name: "createdGames", fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model FollowsGame {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  gameId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, gameId])
}

model InviteToGame {
  id        Int                @id @default(autoincrement())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  userId    Int
  friendId  Int
  gameId    Int
  team      teamType           @default(HOME)
  status    invitationApproval @default(PENDING)
  user      User               @relation(name: "sender", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  friend    User               @relation(name: "receiver", fields: [friendId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  game      Game               @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model AddFriend {
  id        Int                @id @default(autoincrement())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  userId    Int
  friendId  Int
  status    invitationApproval @default(PENDING)
  user      User               @relation(name: "sender", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  friend    User               @relation(name: "receiver", fields: [friendId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, friendId])
}

model RequestToJoinGame {
  id        Int                @id @default(autoincrement())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  userId    Int
  gameId    Int
  team      teamType           @default(HOME)
  status    invitationApproval @default(PENDING)
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  game      Game               @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model HasStatistics {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  gameId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, gameId])
}

model TimeSlot {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  startTime DateTime
  endTime   DateTime
  courtId   Int
  court     Court    @relation(fields: [courtId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Court {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  name        String
  courtType   String
  nbOfPlayers Int
  branchId    Int
  price       Int
  rating      Float?     @default(0.0)
  games       Game[]
  branch      Branch     @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  timeSlots   TimeSlot[]
}

model PlayerRating {
  id          Int   @id @default(autoincrement())
  gameId      Int
  raterId     Int
  playerId    Int
  performance Float
  punctuality Float
  teamPlayer  Float
  fairplay    Float
  game        Game  @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  player      User  @relation(name: "player", fields: [playerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rater       User  @relation(name: "rater", fields: [raterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum invitationApproval {
  PENDING
  APPROVED
  REJECTED
}

enum gameStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  CANCELLED
  FINISHED
}

enum gameType {
  Basketball
  Football
  Tennis
}

enum teamType {
  HOME
  AWAY
}

enum winnerTeamType {
  HOME
  AWAY
  DRAW
}
